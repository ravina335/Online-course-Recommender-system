# -*- coding: utf-8 -*-
"""EDA_part1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15nznz4K84k3-S6m7IdJPP3UvkPYMcRom
"""

course_genre_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-ML321EN-SkillsNetwork/labs/datasets/course_genre.csv"
ratings_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-ML0321EN-Coursera/labs/v2/module_3/ratings.csv"

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
course = pd.read_csv(course_genre_url)
ratings = pd.read_csv(ratings_url)
course

ratings

course.columns



course.shape[0]

course.dtypes

course.iloc[1, ]

title1 = ' '.join(course['TITLE'])
titles= ' '.join( title for title in course['TITLE'].astype(str))
titles

from wordcloud import STOPWORDS, WordCloud,ImageColorGenerator

stopwords = set(STOPWORDS)
stopwords.update(["getting started", "using", "enabling", "template", "university", "end", "introduction", "basic"])

wordcloud = WordCloud(stopwords= stopwords, background_color="white", width= 200, height= 200)
wordcloud = wordcloud.generate(titles)
plt.figure(figsize=(20,40))
plt.axis('off')
plt.tight_layout(pad=0)
plt.imshow(wordcloud, interpolation='bilinear')
plt.show()

#find all courses with genre machine learning
ml_course = course[(course['MachineLearning'] ==1 ) & (course['BigData'] ==1) ]
ml_course.shape

genres = course.columns[2:]
genres

genre_sum = course[genres].sum(axis=0)
genre_df = pd.DataFrame(genre_sum, columns= ['Count'])
sorted_genre_df = genre_df.sort_values(by ='Count', ascending=False)
sorted_genre_df

plt.figure(figsize=(12, 8))  # Adjust figure size as necessary
sns.barplot(x=sorted_genre_df.index, y=sorted_genre_df['Count'], palette='viridis')
plt.xlabel("genre")
plt.ylabel("count")
plt.title("genre count")
plt.xticks(rotation=90, ha='center')
plt.tight_layout()
plt.show()

ratings.head()

ratings['rating'].unique()

ratings.shape

user_rating_counts = ratings.groupby('user').size()
print(user_rating_counts)

total_users = user_rating_counts.shape[0]
print(f"Total number of users: {total_users}")

plt.figure(figsize=(10, 6))
plt.hist(user_rating_counts, bins=50, align='left', edgecolor='black')
plt.title('Distribution of User Rating Counts')
plt.xlabel('Number of Ratings')
plt.ylabel('Number of Users')
plt.grid(axis='y', alpha=0.75)
plt.show()

items_rating_count= ratings.groupby('item').size()

items_rating_count = items_rating_count.reset_index(name='rating_count')
sorted_items_count =items_rating_count.sort_values(by='rating_count',ascending=False)

top_20_courses = sorted_items_count.head(20)
top_20_courses

print("Columns in top_20_courses:")
print(top_20_courses.columns)

print("\nColumns in course_df:")
print(course.columns)



top_20_courses.rename(columns={'item': 'COURSE_ID'}, inplace=True)

# Merge to get course titles
top_20_courses = pd.merge(
    top_20_courses,
    course[['COURSE_ID', 'TITLE']],
    how='left',
    on='COURSE_ID'  # Now both DataFrames have 'COURSE_ID' as the key
)

# Select only the relevant columns
top_20_course = top_20_courses[['TITLE', 'rating_count']]

# Display the result
print(top_20_course)

total = ratings.shape[0]
total

top = top_20_courses['rating_count'].sum()

# Step 3: Calculate the percentage
percentage = (top * 100) / total

# Print the result
print(f"Percentage of the top course enrollments: {round(percentage, 2)}%")

"""**Exploratory data analysis**


Courses data with ratings
"""