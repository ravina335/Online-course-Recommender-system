# -*- coding: utf-8 -*-
"""collaborative filtering based recommender(part7)rs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ek_bDT8XJzRgZ6VLtJOeUDz4e3rIbFIm
"""

import numpy as np
import pandas as pd

rating_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-ML0321EN-Coursera/labs/v2/module_3/ratings.csv"
rating_df = pd.read_csv(rating_url)
rating_df.head()

rating_sparse_df = rating_df.pivot(index='user', columns='item', values='rating').fillna(0).reset_index().rename_axis(index=None, columns=None)
rating_sparse_df.head()

!pip install scikit-surprise

from surprise import KNNBasic
from surprise import Dataset, Reader
from surprise.model_selection import train_test_split
from surprise import accuracy

# Load the movielens-100k dataset (download it if needed),
data = Dataset.load_builtin('ml-100k', prompt=False)

# sample random trainset and testset
# test set is made of 25% of the ratings.
trainset, testset = train_test_split(data, test_size=.25)

# We'll use the famous KNNBasic algorithm.
algo = KNNBasic()

# Train the algorithm on the trainset, and predict ratings for the testset
algo.fit(trainset)
predictions = algo.test(testset)

# Then compute RMSE
accuracy.rmse(predictions)

# Save the rating dataframe to a CSV file
rating_df.to_csv("course_ratings.csv", index=False)

# Read the course rating dataset with columns user item rating
reader = Reader(
    line_format='user item rating', sep=',', skip_lines=1, rating_scale=(2, 3))

# Load the dataset from the CSV file
course_dataset = Dataset.load_from_file("course_ratings.csv", reader=reader)

trainset, testset = train_test_split(course_dataset, test_size=.3)

print(f"Total {trainset.n_users} users and {trainset.n_items} items in the trainingset")

"""**bold texTASK: Perform KNN-based collaborative filtering on the user-item interaction matrixt**"""

# Define KNNBasic model with custom parameters
sim_options = {
    'name': 'cosine',  # Using cosine similarity
    'user_based': False,  # Setting to False to use item-based collaborative filtering
}
model = KNNBasic(sim_options=sim_options)

# Train the model on the trainset
model.fit(trainset)

# Test the model on the testset
predictions = model.test(testset)

# Compute RMSE
accuracy.rmse(predictions)



rating_sparse_df = rating_df.pivot(index='user', columns='item', values='rating').fillna(0).reset_index().rename_axis(index=None, columns=None)
rating_sparse_df.head()

from surprise import NMF
from surprise import Dataset, Reader
from surprise.model_selection import train_test_split
from surprise import accuracy

# Save the rating dataframe to a CSV file
rating_df.to_csv("course_ratings.csv", index=False)

# Read the course rating dataset with columns user item rating
reader = Reader(line_format='user item rating', sep=',', skip_lines=1, rating_scale=(2, 3))

# Load the dataset from the CSV file
course_dataset = Dataset.load_from_file("course_ratings.csv", reader=reader)

trainset, testset = train_test_split(course_dataset, test_size=.3)

print(f"Total {trainset.n_users} users and {trainset.n_items} items in the trainingset")

